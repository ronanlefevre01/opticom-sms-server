import { Environments } from './constants';
import { APIOptions } from './api/api';
import { BalanceService } from './services/balanceService';
import { BankAccountDetailService } from './services/bankAccountDetailService';
import { BankAuthorisationService } from './services/bankAuthorisationService';
import { BankDetailsLookupService } from './services/bankDetailsLookupService';
import { BillingRequestService } from './services/billingRequestService';
import { BillingRequestFlowService } from './services/billingRequestFlowService';
import { BillingRequestTemplateService } from './services/billingRequestTemplateService';
import { BillingRequestWithActionService } from './services/billingRequestWithActionService';
import { BlockService } from './services/blockService';
import { CreditorService } from './services/creditorService';
import { CreditorBankAccountService } from './services/creditorBankAccountService';
import { CurrencyExchangeRateService } from './services/currencyExchangeRateService';
import { CustomerService } from './services/customerService';
import { CustomerBankAccountService } from './services/customerBankAccountService';
import { CustomerNotificationService } from './services/customerNotificationService';
import { EventService } from './services/eventService';
import { ExportService } from './services/exportService';
import { InstalmentScheduleService } from './services/instalmentScheduleService';
import { InstitutionService } from './services/institutionService';
import { LogoService } from './services/logoService';
import { MandateService } from './services/mandateService';
import { MandateImportService } from './services/mandateImportService';
import { MandateImportEntryService } from './services/mandateImportEntryService';
import { MandatePdfService } from './services/mandatePdfService';
import { NegativeBalanceLimitService } from './services/negativeBalanceLimitService';
import { OutboundPaymentService } from './services/outboundPaymentService';
import { PayerAuthorisationService } from './services/payerAuthorisationService';
import { PayerThemeService } from './services/payerThemeService';
import { PaymentService } from './services/paymentService';
import { PayoutService } from './services/payoutService';
import { PayoutItemService } from './services/payoutItemService';
import { RedirectFlowService } from './services/redirectFlowService';
import { RefundService } from './services/refundService';
import { ScenarioSimulatorService } from './services/scenarioSimulatorService';
import { SchemeIdentifierService } from './services/schemeIdentifierService';
import { SubscriptionService } from './services/subscriptionService';
import { TaxRateService } from './services/taxRateService';
import { TransferredMandateService } from './services/transferredMandateService';
import { VerificationDetailService } from './services/verificationDetailService';
import { WebhookService } from './services/webhookService';
export declare class GoCardlessClient {
    private _api;
    private _balances;
    private _bankAccountDetails;
    private _bankAuthorisations;
    private _bankDetailsLookups;
    private _billingRequests;
    private _billingRequestFlows;
    private _billingRequestTemplates;
    private _billingRequestWithActions;
    private _blocks;
    private _creditors;
    private _creditorBankAccounts;
    private _currencyExchangeRates;
    private _customers;
    private _customerBankAccounts;
    private _customerNotifications;
    private _events;
    private _exports;
    private _instalmentSchedules;
    private _institutions;
    private _logos;
    private _mandates;
    private _mandateImports;
    private _mandateImportEntries;
    private _mandatePdfs;
    private _negativeBalanceLimits;
    private _outboundPayments;
    private _payerAuthorisations;
    private _payerThemes;
    private _payments;
    private _payouts;
    private _payoutItems;
    private _redirectFlows;
    private _refunds;
    private _scenarioSimulators;
    private _schemeIdentifiers;
    private _subscriptions;
    private _taxRates;
    private _transferredMandates;
    private _verificationDetails;
    private _webhooks;
    constructor(token: string, environment?: Environments, options?: APIOptions);
    get balances(): BalanceService;
    get bankAccountDetails(): BankAccountDetailService;
    get bankAuthorisations(): BankAuthorisationService;
    get bankDetailsLookups(): BankDetailsLookupService;
    get billingRequests(): BillingRequestService;
    get billingRequestFlows(): BillingRequestFlowService;
    get billingRequestTemplates(): BillingRequestTemplateService;
    get billingRequestWithActions(): BillingRequestWithActionService;
    get blocks(): BlockService;
    get creditors(): CreditorService;
    get creditorBankAccounts(): CreditorBankAccountService;
    get currencyExchangeRates(): CurrencyExchangeRateService;
    get customers(): CustomerService;
    get customerBankAccounts(): CustomerBankAccountService;
    get customerNotifications(): CustomerNotificationService;
    get events(): EventService;
    get exports(): ExportService;
    get instalmentSchedules(): InstalmentScheduleService;
    get institutions(): InstitutionService;
    get logos(): LogoService;
    get mandates(): MandateService;
    get mandateImports(): MandateImportService;
    get mandateImportEntries(): MandateImportEntryService;
    get mandatePdfs(): MandatePdfService;
    get negativeBalanceLimits(): NegativeBalanceLimitService;
    get outboundPayments(): OutboundPaymentService;
    get payerAuthorisations(): PayerAuthorisationService;
    get payerThemes(): PayerThemeService;
    get payments(): PaymentService;
    get payouts(): PayoutService;
    get payoutItems(): PayoutItemService;
    get redirectFlows(): RedirectFlowService;
    get refunds(): RefundService;
    get scenarioSimulators(): ScenarioSimulatorService;
    get schemeIdentifiers(): SchemeIdentifierService;
    get subscriptions(): SubscriptionService;
    get taxRates(): TaxRateService;
    get transferredMandates(): TransferredMandateService;
    get verificationDetails(): VerificationDetailService;
    get webhooks(): WebhookService;
}
